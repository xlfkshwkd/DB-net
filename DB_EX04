SELECT *FROM emp;

SELECT *FROM dept;

CREATE TABLE dept_fk (
	DEPTNO NUMBER(2) CONSTRAINT PK_DEPT_PK PRIMARY KEY,
	DNAME VARCHAR2(14),
	LOC VARCHAR2(13)

);


CREATE TABLE EMP_PK (
	EMPNO NUMBER(4) CONSTRAINT PK_EMP_PK PRIMARY KEY,
	ENAME VARCHAR2(10),
	JOB VARCHAR2(9),
	MGB NUMBER(4),
	HIRDATE DATE,
	SAL NUMBER(7,2),
	DEPTNO NUMBER(2) CONSTRAINT FK_EMP_FK_DEPTNO REFERENCES DEPT_FK(DEPTNO)
	
);

INSERT INTO EMP_PK (EMPNO,ENAME,JOB,DEPTNO)
VALUES(9998,'김이름','CLEKCK',10);



INSERT INTO DEPT_FK SELECT *FROM DEPT;


SELECT *FROM DEPT_FK ;

SELECT *FROM EMP_PK ;
--외래키 제공은 자식

DELETE FROM DEPT_FK WHERE DEPTNO =10;

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='EMP_FK';

ALTER TABLE EMP_PK DROP CONSTRAINTS FK_EMP_FK_DEPTNO;

ALTER TABLE EMP_PK ADD CONSTRAINT FK_EMP_FK_DEPTNO
FOREIGN KEY(DEPTNO)REFERENCES DEPT_FK(DEPTNO) ON DELETE CASCADE ;

DELETE FROM DEPT_FK WHERE DEPTNO=10;
ROLLBACK;

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='EMP_FK';

ALTER TABLE EMP_PK DROP CONSTRAINT FK_EMP_FK_DEPTNO;


ALTER TABLE EMP_PK ADD CONSTRAINT FK_EMP_FK_DEPTNO
FOREIGN KEY(DEPTNO)REFERENCES DEPT_FK(DEPTNO) ON DELETE SET NULL ;


SELECT *FROM EMP_PK;


DELETE FROM DEPT_FK WHERE DEPTNO=10;


CREATE TABLE USERS (
	USER_NO VARCHAR(11) CONSTRAINTS PK_USERS PRIMARY KEY,
	USER_ID VARCHAR(20) CONSTRAINTS USERS_ID_NN NOT NULL 
	 CONSTRAINTS USERS_ID_UQ  UNIQUE,
	 USER_PW VARCHAR(65) CONSTRAINTS USERS_PW_NN NOT NULL ,
	 USER_NM VARCHAR(11) CONSTRAINTS USERS_NM_NN NOT NULL ,
	 AGE NUMBER(3) CONSTRAINTS USERS_AGE_CK CHECK(AGE >=14),
	 REG_DT DATE DEFAULT SYSDATE
	);


CREATE SEQUENCE SEQ_USERS;

INSERT INTO USERS(USER_NO,USER_ID,USER_PW,USER_NM,AGE) 
VALUES(SEQ_USERS.NEXTVAL, 'USER01','1234','사용자01',14);


SELECT *FROM USERS;

-- ALTER TABLE 테이블명 DISABLE CONSTRAINT 제약조건명 

--비활성화  ALTER TABLE 테이블명 ENABLE CONSTRAINTS 제약조건명 
 
SELECT *FROM USER_CONSTRAINTS WHERE TABLE_NAME='USERS';

ALTER TABLE USERS DISABLE CONSTRAINT USERS_AGE_CK;

INSERT INTO USERS(USER_NO,USER_ID,USER_PW,USER_NM,AGE) 
VALUES(SEQ_USERS.NEXTVAL, 'USER02','123456','사용자02',10);


ALTER TABLE USERS ENABLE CONSTRAINT USERS_AGE_CK;

UPDATE USERS SET AGE =14 WHERE USER_ID ='USER02';

SELECT * FROM emp ;
SELECT *FROM DEPT;

SELECT * FROM EMP,DEPT;
--카티션 프로덕트 마구 마구 섞임 

SELECT * FROM EMP E,DEPT D WHERE E.DEPTNO =D.DEPTNO ;

--ALL 중복을 포함한 모든 레코드 
--DISRINCR 구분되는 중복이 없는 

SELECT JOB FROM EMP;

SELECT DISTINCT JOB,DEPTNO FROM EMP;
--컬럼이 여러개인경우 컬럼을 조합한 값이 
SELECT *FROM EMP;


SELECT EMPNO , ENAME,SAL, 
SAL*12 +NVL(COMM,0) AS "연봉"
FROM EMP;


-- NULL 은연산이 되지않기 때문에 다른 방법을 써서 출력 
-- IS NULL 
--IS NOT NULL 컬럼이 널이 아닌지 체크 

SELECT * FROM EMP WHERE COMM IS NOT NULL ;

--SELECT * FROM 테이블명 WHERE ORDER BY 컬럼명 ASC OR DESC;

SELECT * FROM EMP ORDER BY SAL DESC ;

SELECT * FROM EMP ORDER BY SAL  ;


--ORDER BY 컬럼명 ASC OR DESC -1차 정렬;
-- , 붙히고 또적음  컬럼명 + ASC OR DESC 

SELECT * FROM EMP ORDER BY SAL DESC,ENAME DESC ;

SELECT 100*3 FROM DUAL;

SELECT * FROM EMP WHERE JOB ='SALESMAN' AND DEPTNO =30;

SELECT * FROM EMP WHERE DEPTNO=30 AND SAL>=1500;

SELECT * FROM EMP WHERE DEPTNO=30 AND SAL>=1500 OR SAL<=1000;

SELECT * FROM EMP WHERE (JOB='SALESMAN' OR JOB ='CLERK'OR JOB='MANAGER') AND SAL<=3000;
-- OR 조건을 넣을때는 

SELECT * FROM EMP WHERE JOB IN('SALESMAN','CLERK','MANAGER')  AND SAL <=3000;

SELECT * FROM EMP WHERE JOB NOT IN('SALESMAN','CLERK','MANAGER')  AND SAL <=3000;


SELECT * FROM EMP WHERE SAL BETWEEN 2000 AND 3000;


SELECT * FROM EMP 
WHERE HIREDATE >= TO_DATE('1981-01-01 00:00:00','YYYY-MM-DD-HH24:MI:SS') 
	AND HIREDATE <=TO_DATE('1981-12-31 23:59:59','YYYY-MM-DD-HH24:MI:SS');

SELECT * FROM EMP 
WHERE HIREDATE BETWEEN TO_DATE('1981-01-01 00:00:00','YYYY-MM-DD-HH24:MI:SS') 
	AND TO_DATE('1981-12-31 23:59:59','YYYY-MM-DD-HH24:MI:SS');

SELECT * FROM EMP WHERE ENAME LIKE '%A%';

SELECT * FROM EMP WHERE ENAME LIKE '%D';

SELECT * FROM EMP WHERE ENAME LIKE '%AR%';


SELECT * FROM EMP WHERE ENAME LIKE '__A%';
-- _언더바 기호를 넣으면 그칸만큼벌어진곳부터 찾음  __A%;


SELECT *FROM EMP_PK ;

INSERT INTO EMP_PK(EMPNO,ENAME,JOB)VALUES(9995,'박_이름','CLEKCK') ;


INSERT INTO EMP_PK(EMPNO,ENAME,JOB)VALUES(9996,'최%이름','CLEKCK') ;

SELECT * FROM EMP_PK WHERE ENAME LIKE '_이%';

SELECT * FROM EMP_PK WHERE ENAME LIKE '%-_이%' ESCAPE '-';
-- ESCAPE 로 설정한 기호 다음에는 다 이름으로 취급


--IS NULL 연산안됌 

SELECT *FROM EMP WHERE COMM >=100;


SELECT *FROM EMP WHERE COMM IS NULL;
SELECT *FROM EMP WHERE COMM IS NOT NULL;
--MYSQL 에서는 NULL 말고 그냥 빈것도 있음 OR PUBLISER =='' 이렇게 비교를해줘야 한다. 


SELECT EMPNO ,ENAME ,SAL,COMM,SAL*12+ NVL(COMM,0) 연봉, NVL2(COMM,'있음','없음') "커미션 유무" FROM EMP;

--참고 오라클 MSSQL 교집합과 차집합 IN, NOT IN 을이용하면 비슷한 효과 

 


SELECT *FROM EMP WHERE SAL >= 2000 
UNION ALL
SELECT *FROM EMP WHERE SAL <= 2500;


SELECT *FROM EMP WHERE SAL >= 2000 
INTERSECT
SELECT *FROM EMP WHERE SAL <= 2500;



SELECT *FROM EMP WHERE SAL >= 2000 
MINUS 
SELECT *FROM EMP WHERE SAL <= 2500;


SELECT *FROM EMP WHERE SAL >= 2000 AND EMPNO IN (SELECT EMPNO FROM EMP WHERE SAL <= 2500);

SELECT *FROM EMP WHERE SAL >= 2000 AND EMPNO NOT IN (SELECT EMPNO FROM EMP WHERE SAL <= 2500);

--단일행 함수 

--다중행 함수 

SELECT nvl(COMM,0) COMM FROM EMP;


SELECT SUM(SAL) "급여합계" FROM EMP;


SELECT UPPER(ENAME) "이름대문자" FROM EMP;

SELECT LOWER(ENAME) "이름소문자" FROM EMP;

SELECT *FROM EMP WHERE LOWER(ENAME) LIKE LOWER('Soctt'); 

SELECT LENGTH ('가나다'),LENGTHB('가나다 라')  FROM DUAL;

SELECT  * FROM EMP;



SELECT  SUBSTR(JOB,0,2)  FROM EMP;

SELECT  * FROM EMP;























